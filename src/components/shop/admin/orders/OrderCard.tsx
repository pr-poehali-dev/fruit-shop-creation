import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';

interface OrderCardProps {
  order: any;
  statusLabels: Record<string, string>;
  getStatusBadgeVariant: (status: string) => string;
  onViewDetails: (order: any) => void;
  onEditStatus: (order: any) => void;
  onDelete: (orderId: number) => void;
}

export const OrderCard = ({
  order,
  statusLabels,
  getStatusBadgeVariant,
  onViewDetails,
  onEditStatus,
  onDelete
}: OrderCardProps) => {
  return (
    <div className="p-3 sm:p-4 border rounded-lg space-y-3">
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-start gap-2">
        <div className="flex-1">
          <div className="font-medium text-sm sm:text-base">–ó–∞–∫–∞–∑ #{order.id}</div>
          <div className="text-xs sm:text-sm text-muted-foreground">
            {order.user_name} ({order.user_phone})
          </div>
          <div className="text-xs text-muted-foreground mt-1">
            {new Date(order.created_at).toLocaleString('ru-RU', { 
              day: '2-digit', 
              month: '2-digit', 
              year: 'numeric', 
              hour: '2-digit', 
              minute: '2-digit' 
            })}
          </div>
        </div>
        <div className="flex sm:flex-col items-center sm:items-end gap-2 sm:text-right">
          <div className="space-y-1">
            <div className={`font-bold text-base sm:text-lg ${order.is_preorder ? 'line-through text-muted-foreground text-sm' : ''}`}>
              {order.items ? 
                order.items
                  .filter((i: any) => i.product_name)
                  .reduce((sum: number, i: any) => {
                    if (i.is_out_of_stock) {
                      if (i.available_quantity > 0) {
                        const price = parseFloat(i.available_price) || parseFloat(i.price);
                        const qty = parseInt(i.available_quantity);
                        return sum + (price * qty);
                      }
                      return sum;
                    }
                    return sum + (parseFloat(i.price) * parseInt(i.quantity));
                  }, 0).toFixed(2)
                : parseFloat(order.total_amount).toFixed(2)
              }‚ÇΩ
            </div>
            {order.is_preorder && order.amount_paid && (
              <div className="text-blue-700 dark:text-blue-300 font-bold text-sm">
                –û–ø–ª–∞—á–µ–Ω–æ: {parseFloat(order.amount_paid).toFixed(2)}‚ÇΩ
              </div>
            )}
            {!order.is_preorder && (
              <div className="text-green-700 dark:text-green-300 font-semibold text-xs flex items-center gap-1">
                <Icon name="CheckCircle" size={12} />
                –ü–æ–ª–Ω–æ—Å—Ç—å—é
              </div>
            )}
          </div>
          <Badge variant={getStatusBadgeVariant(order.status)} className="text-xs">
            {statusLabels[order.status] || order.status}
          </Badge>
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3 text-xs sm:text-sm">
        <div>
          <div className="font-medium">–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</div>
          <div className="text-muted-foreground">
            {order.payment_method === 'balance' ? '–ë–∞–ª–∞–Ω—Å' : 
             order.payment_method === 'card' ? '–ö–∞—Ä—Ç–∞' : 
             order.payment_method === 'sber_qr' ? '–°–±–µ—Ä–ë–∞–Ω–∫ QR' :
             '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏'}
          </div>
        </div>
        <div>
          <div className="font-medium">–î–æ—Å—Ç–∞–≤–∫–∞:</div>
          <div className="text-muted-foreground">
            {order.delivery_type === 'delivery' ? 'üöö –î–æ—Å—Ç–∞–≤–∫–∞' : 'üè™ –°–∞–º–æ–≤—ã–≤–æ–∑'}
            {order.delivery_zone_id && (
              <span className="ml-1 text-xs text-primary">
                (–ó–æ–Ω–∞ #{order.delivery_zone_id})
              </span>
            )}
            {order.custom_delivery_price && (
              <span className="ml-1 text-xs font-bold text-primary">
                {order.custom_delivery_price}‚ÇΩ
              </span>
            )}
          </div>
        </div>
        <div className="sm:col-span-2">
          <div className="font-medium">–ê–¥—Ä–µ—Å:</div>
          <div className="text-muted-foreground break-words">{order.delivery_address}</div>
        </div>
      </div>

      {order.rejection_reason && (
        <div className="text-sm bg-destructive/10 p-2 rounded">
          <div className="font-medium text-destructive">–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞:</div>
          <div className="text-muted-foreground">{order.rejection_reason}</div>
        </div>
      )}

      {order.status === 'cancelled' && order.cancellation_reason && (
        <div className="text-sm bg-orange-50 dark:bg-orange-950/20 p-2 rounded border border-orange-200 dark:border-orange-800">
          <div className="font-medium text-orange-700 dark:text-orange-300">
            –û—Ç–º–µ–Ω—ë–Ω {order.cancelled_by === 'admin' ? '(–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)' : '(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)'}:
          </div>
          <div className="text-muted-foreground">{order.cancellation_reason}</div>
        </div>
      )}

      {order.items && order.items.some((i: any) => i.is_out_of_stock) && (
        <div className="text-sm bg-amber-50 dark:bg-amber-950/20 p-2 rounded border border-amber-200 dark:border-amber-800">
          <div className="font-medium text-amber-700 dark:text-amber-300">
            ‚ö†Ô∏è –¢–æ–≤–∞—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
          </div>
        </div>
      )}

      <div className="flex flex-wrap gap-2">
        <Button onClick={() => onViewDetails(order)} variant="outline" size="sm">
          <Icon name="Eye" size={16} className="mr-1" />
          –î–µ—Ç–∞–ª–∏
        </Button>
        <Button onClick={() => onEditStatus(order)} variant="outline" size="sm">
          <Icon name="Edit" size={16} className="mr-1" />
          –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        </Button>
        <Button onClick={() => onDelete(order.id)} variant="destructive" size="sm">
          <Icon name="Trash2" size={16} className="mr-1" />
          –£–¥–∞–ª–∏—Ç—å
        </Button>
      </div>
    </div>
  );
};