import { useState, useEffect, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import Icon from '@/components/ui/icon';

const API_LOYALTY = 'https://functions.poehali.dev/ed127250-fe9d-4c7e-9a93-fb8b7fdc038a';

const LoyaltyScannerTab = () => {
  const { toast } = useToast();
  const [cardNumber, setCardNumber] = useState('');
  const [purchaseAmount, setPurchaseAmount] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [lastResult, setLastResult] = useState<any>(null);
  const cardInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (cardInputRef.current) {
      cardInputRef.current.focus();
    }
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    const amount = parseFloat(purchaseAmount);
    
    if (!cardNumber.trim()) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã',
        variant: 'destructive'
      });
      return;
    }

    if (isNaN(amount) || amount < 100) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ - 100‚ÇΩ',
        variant: 'destructive'
      });
      return;
    }

    setIsProcessing(true);
    setLastResult(null);

    try {
      const response = await fetch(API_LOYALTY, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          card_number: cardNumber,
          purchase_amount: amount
        })
      });

      const data = await response.json();

      if (data.success) {
        setLastResult(data);
        toast({
          title: '–ö—ç—à–±–µ–∫ –Ω–∞—á–∏—Å–ª–µ–Ω!',
          description: `+${data.cashback_earned.toFixed(2)}‚ÇΩ –¥–ª—è ${data.user_name}`
        });
        setCardNumber('');
        setPurchaseAmount('');
        
        setTimeout(() => {
          if (cardInputRef.current) {
            cardInputRef.current.focus();
          }
        }, 100);
      } else {
        toast({
          title: '–û—à–∏–±–∫–∞',
          description: data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±–µ–∫',
          variant: 'destructive'
        });
      }
    } catch (error) {
      toast({
        title: '–û—à–∏–±–∫–∞',
        description: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±–µ–∫',
        variant: 'destructive'
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const extractCardNumber = (input: string) => {
    if (input.startsWith('LOYALTY:')) {
      const parts = input.split(':');
      return parts[1] || input;
    }
    return input;
  };

  const handleCardNumberChange = (value: string) => {
    const cleanValue = extractCardNumber(value.trim());
    setCardNumber(cleanValue);
    
    if (cleanValue.startsWith('LC') && cleanValue.length >= 10 && purchaseAmount) {
      setTimeout(() => {
        const amountInput = document.getElementById('purchase-amount') as HTMLInputElement;
        if (amountInput) {
          amountInput.focus();
        }
      }, 100);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>–°–∫–∞–Ω–µ—Ä –∫–∞—Ä—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</CardTitle>
        <CardDescription>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫—ç—à–±–µ–∫–∞ –ø–æ QR-–∫–æ–¥—É –∫–∞—Ä—Ç—ã</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="bg-primary/5 p-4 rounded-lg border-2 border-dashed border-primary/20">
            <div className="flex items-center gap-3 mb-3">
              <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center">
                <Icon name="ScanLine" size={24} className="text-primary" />
              </div>
              <div>
                <p className="font-semibold">–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥</p>
                <p className="text-xs text-muted-foreground">–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é</p>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <Label htmlFor="card-number">–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</Label>
                <Input
                  ref={cardInputRef}
                  id="card-number"
                  value={cardNumber}
                  onChange={(e) => handleCardNumberChange(e.target.value)}
                  placeholder="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ LC..."
                  required
                  className="font-mono text-base"
                  autoComplete="off"
                  autoFocus
                />
                <p className="text-xs text-muted-foreground mt-1">
                  üí° –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ - –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                </p>
              </div>

              <div>
                <Label htmlFor="purchase-amount">–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ (‚ÇΩ)</Label>
                <Input
                  id="purchase-amount"
                  type="number"
                  step="0.01"
                  min="100"
                  value={purchaseAmount}
                  onChange={(e) => setPurchaseAmount(e.target.value)}
                  placeholder="1000"
                  required
                />
                <p className="text-xs text-muted-foreground mt-1">
                  –ö—ç—à–±–µ–∫ 3% –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –æ—Ç —Å—É–º–º—ã –ø–æ–∫—É–ø–∫–∏ –æ—Ç 100‚ÇΩ
                </p>
              </div>
            </div>
          </div>

          <Button type="submit" disabled={isProcessing} className="w-full">
            {isProcessing ? (
              <>–û–±—Ä–∞–±–æ—Ç–∫–∞...</>
            ) : (
              <>
                <Icon name="Percent" size={18} className="mr-2" />
                –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—ç—à–±–µ–∫
              </>
            )}
          </Button>

          {lastResult && (
            <div className="bg-green-50 dark:bg-green-950/20 p-4 rounded-lg border border-green-200 dark:border-green-800">
              <div className="flex items-start gap-3">
                <div className="w-10 h-10 rounded-full bg-green-500 flex items-center justify-center flex-shrink-0">
                  <Icon name="CheckCircle2" size={20} className="text-white" />
                </div>
                <div className="flex-1">
                  <h4 className="font-semibold text-green-900 dark:text-green-100">
                    –ö—ç—à–±–µ–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω
                  </h4>
                  <div className="mt-2 space-y-1 text-sm text-green-800 dark:text-green-200">
                    <p>–ö–ª–∏–µ–Ω—Ç: <strong>{lastResult.user_name}</strong> ({lastResult.user_phone})</p>
                    <p>–ù–∞—á–∏—Å–ª–µ–Ω–æ –∫—ç—à–±–µ–∫–∞: <strong className="text-lg">+{lastResult.cashback_earned.toFixed(2)}‚ÇΩ</strong></p>
                    <p>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫—ç—à–±–µ–∫–∞: <strong>{lastResult.new_cashback.toFixed(2)}‚ÇΩ</strong></p>
                  </div>
                </div>
              </div>
            </div>
          )}

          <div className="bg-muted/50 p-4 rounded-lg">
            <h4 className="font-semibold mb-2 flex items-center gap-2">
              <Icon name="Info" size={16} />
              –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
            </h4>
            <ul className="text-sm text-muted-foreground space-y-1">
              <li>‚Ä¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç QR-–∫–æ–¥ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏</li>
              <li>‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã</li>
              <li>‚Ä¢ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω–∏–º—É–º 100‚ÇΩ)</li>
              <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–∏—Ç 3% –∫—ç—à–±–µ–∫–∞ –Ω–∞ —Å—á–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞</li>
            </ul>
          </div>
        </form>
      </CardContent>
    </Card>
  );
};

export default LoyaltyScannerTab;