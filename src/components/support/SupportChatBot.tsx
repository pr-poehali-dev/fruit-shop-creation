import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import Icon from '@/components/ui/icon';
import { useToast } from '@/hooks/use-toast';

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
}

interface FAQ {
  keywords: string[];
  question: string;
  answer: string;
}

const faqs: FAQ[] = [
  {
    keywords: ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ—Å—Ç–∞–≤–∏—Ç—å', '–ø—Ä–∏–≤–µ–∑—Ç–∏', '–¥–æ—Å—Ç–∞–≤—è—Ç', '–ø—Ä–∏–≤–æ–∑–∏—Ç–µ'],
    question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?',
    answer: '–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç—ã –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É. –°—Ç–æ–∏–º–æ—Å—Ç—å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ä–∞–π–æ–Ω–∞. –ü—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤—ã —É–≤–∏–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è.'
  },
  {
    keywords: ['–æ–ø–ª–∞—Ç–∞', '–æ–ø–ª–∞—Ç–∏—Ç—å', '–ø–ª–∞—Ç–∏—Ç—å', '–∫–∞—Ä—Ç–∞', '–Ω–∞–ª–∏—á–Ω—ã–µ', '—Å–ø–æ—Å–æ–±'],
    question: '–ö–∞–∫ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑?',
    answer: '–ü—Ä–∏–Ω–∏–º–∞–µ–º –æ–ø–ª–∞—Ç—É –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π –æ–Ω–ª–∞–π–Ω, –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏. –û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∑–∞—â–∏—â–µ–Ω–∞ –±–∞–Ω–∫–æ–º.'
  },
  {
    keywords: ['–≤—Ä–µ–º—è', '—Ä–∞–±–æ—Ç–∞–µ—Ç–µ', '–≥—Ä–∞—Ñ–∏–∫', '—á–∞—Å—ã', '–æ—Ç–∫—Ä—ã—Ç—ã', '–∑–∞–∫—Ä—ã—Ç—ã'],
    question: '–ö–æ–≥–¥–∞ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?',
    answer: '–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 9:00 –¥–æ 21:00. –ó–∞–∫–∞–∑—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ —Å–∞–π—Ç.'
  },
  {
    keywords: ['—Å–≤–µ–∂–µ—Å—Ç—å', '—Å–≤–µ–∂–∏–µ', '–∫–∞—á–µ—Å—Ç–≤–æ', '–∑–∞–≤—è–ª–∏', '—É–≤—è–¥—à–∏–µ'],
    question: '–ù–∞—Å–∫–æ–ª—å–∫–æ —Å–≤–µ–∂–∏–µ —Ü–≤–µ—Ç—ã?',
    answer: '–í—Å–µ —Ü–≤–µ—Ç—ã —Å–≤–µ–∂–∏–µ, –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞–ø—Ä—è–º—É—é –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5-7 –¥–Ω–µ–π –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Ö–æ–¥–µ. –ï—Å–ª–∏ —Ü–≤–µ—Ç—ã –∑–∞–≤—è–Ω—É—Ç —Ä–∞–Ω—å—à–µ - –≤–µ—Ä–Ω—ë–º –¥–µ–Ω—å–≥–∏.'
  },
  {
    keywords: ['–≤–æ–∑–≤—Ä–∞—Ç', '–≤–µ—Ä–Ω—É—Ç—å', '–æ–±–º–µ–Ω', '–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', '–Ω–µ –ø–æ–¥–æ—à–ª–∏'],
    question: '–ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–∫–∞–∑?',
    answer: '–ï—Å–ª–∏ –±—É–∫–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ —Ü–≤–µ—Ç—ã –Ω–µ—Å–≤–µ–∂–∏–µ - –≤–µ—Ä–Ω—ë–º –¥–µ–Ω—å–≥–∏ –∏–ª–∏ –∑–∞–º–µ–Ω–∏–º –±—É–∫–µ—Ç. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è.'
  },
  {
    keywords: ['–±–æ–Ω—É—Å—ã', '–∫—ç—à–±—ç–∫', '—Å–∫–∏–¥–∫–∞', '–±–∞–ª–ª—ã', '–Ω–∞–∫–æ–ø–∏—Ç—å'],
    question: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –±–æ–Ω—É—Å—ã?',
    answer: '–° –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∫—ç—à–±—ç–∫ 5% –Ω–∞ –±–∞–ª–∞–Ω—Å. –ë–æ–Ω—É—Å–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 50% —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ù–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç.'
  },
  {
    keywords: ['–∑–∞–∫–∞–∑–∞—Ç—å', '–æ—Ñ–æ—Ä–º–∏—Ç—å', '–∫—É–ø–∏—Ç—å', '–≤—ã–±—Ä–∞—Ç—å', '–∫–∞—Ç–∞–ª–æ–≥'],
    question: '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?',
    answer: '–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏, –æ–ø–ª–∞—Ç–∏—Ç–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ñ–ª–æ—Ä–∏—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
  },
  {
    keywords: ['–æ—Ç–∫—Ä—ã—Ç–∫–∞', '–∑–∞–ø–∏—Å–∫–∞', '–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Ç–µ–∫—Å—Ç', '–ø–æ–∂–µ–ª–∞–Ω–∏–µ'],
    question: '–ú–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É?',
    answer: '–î–∞, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è. –ú—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ–±–∞–≤–∏–º –æ—Ç–∫—Ä—ã—Ç–∫—É —Å –≤–∞—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.'
  },
  {
    keywords: ['—Ñ–æ—Ç–æ', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç', '–ø–æ–∫–∞–∑–∞—Ç—å', '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å'],
    question: '–ë—É–∫–µ—Ç –±—É–¥–µ—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ?',
    answer: '–ú—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –Ω–æ —Å–æ—Å—Ç–∞–≤ –º–æ–∂–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ–∑–æ–Ω–∞. –í—Å–µ–≥–¥–∞ —Å–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ–º –∑–∞–º–µ–Ω—ã —Å –∫–ª–∏–µ–Ω—Ç–æ–º.'
  },
  {
    keywords: ['–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Å–≤—è–∑–∞—Ç—å—Å—è', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–Ω–∞–ø–∏—Å–∞—Ç—å', '–ø–æ–∑–≤–æ–Ω–∏—Ç—å'],
    question: '–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?',
    answer: '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (XXX) XXX-XX-XX. –û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.'
  }
];

interface SupportChatBotProps {
  onCreateTicket: () => void;
}

const SupportChatBot = ({ onCreateTicket }: SupportChatBotProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  useEffect(() => {
    if (isOpen && messages.length === 0) {
      addBotMessage('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –¥–æ—Å—Ç–∞–≤–∫–µ, –æ–ø–ª–∞—Ç–µ, —Ä–∞–±–æ—Ç–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
  }, [isOpen]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const addBotMessage = (text: string) => {
    const message: Message = {
      id: Date.now().toString(),
      text,
      isBot: true,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, message]);
  };

  const addUserMessage = (text: string) => {
    const message: Message = {
      id: Date.now().toString(),
      text,
      isBot: false,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, message]);
  };

  const findAnswer = (userText: string): string | null => {
    const normalizedText = userText.toLowerCase();
    
    for (const faq of faqs) {
      if (faq.keywords.some(keyword => normalizedText.includes(keyword))) {
        return faq.answer;
      }
    }
    
    return null;
  };

  const handleSend = () => {
    if (!inputValue.trim()) return;

    addUserMessage(inputValue);
    const answer = findAnswer(inputValue);

    setTimeout(() => {
      if (answer) {
        addBotMessage(answer);
        setTimeout(() => {
          addBotMessage('–ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã? –ò–ª–∏ –º–æ–≥—É –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        }, 1000);
      } else {
        addBotMessage('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à—ë–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É? –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—Ç—è—Ç –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
      }
    }, 500);

    setInputValue('');
  };

  const handleQuickQuestion = (question: string) => {
    const faq = faqs.find(f => f.question === question);
    if (faq) {
      addUserMessage(question);
      setTimeout(() => {
        addBotMessage(faq.answer);
      }, 500);
    }
  };

  return (
    <>
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg z-50"
          size="icon"
        >
          <Icon name="MessageCircle" size={24} />
        </Button>
      )}

      {isOpen && (
        <Card className="fixed bottom-6 right-6 w-96 h-[600px] shadow-2xl z-50 flex flex-col">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4 border-b">
            <CardTitle className="text-lg flex items-center gap-2">
              <Icon name="Bot" size={20} />
              –ü–æ–º–æ—â–Ω–∏–∫
            </CardTitle>
            <Button
              variant="ghost"
              size="icon"
              onClick={() => setIsOpen(false)}
            >
              <Icon name="X" size={20} />
            </Button>
          </CardHeader>

          <CardContent className="flex-1 flex flex-col p-4 overflow-hidden">
            <div className="flex-1 overflow-y-auto space-y-4 mb-4">
              {messages.map((msg) => (
                <div
                  key={msg.id}
                  className={`flex ${msg.isBot ? 'justify-start' : 'justify-end'}`}
                >
                  <div
                    className={`max-w-[80%] rounded-lg px-4 py-2 ${
                      msg.isBot
                        ? 'bg-muted text-foreground'
                        : 'bg-primary text-primary-foreground'
                    }`}
                  >
                    <p className="text-sm">{msg.text}</p>
                    <span className="text-xs opacity-70 mt-1 block">
                      {msg.timestamp.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </span>
                  </div>
                </div>
              ))}
              <div ref={messagesEndRef} />
            </div>

            {messages.length === 1 && (
              <div className="mb-4 space-y-2">
                <p className="text-xs text-muted-foreground mb-2">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</p>
                {faqs.slice(0, 3).map((faq, idx) => (
                  <Button
                    key={idx}
                    variant="outline"
                    size="sm"
                    className="w-full justify-start text-left h-auto py-2 px-3"
                    onClick={() => handleQuickQuestion(faq.question)}
                  >
                    <span className="text-xs">{faq.question}</span>
                  </Button>
                ))}
              </div>
            )}

            <div className="space-y-2">
              <div className="flex gap-2">
                <Input
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSend()}
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
                  className="flex-1"
                />
                <Button onClick={handleSend} size="icon">
                  <Icon name="Send" size={18} />
                </Button>
              </div>
              
              <Button
                variant="outline"
                size="sm"
                className="w-full"
                onClick={onCreateTicket}
              >
                <Icon name="Ticket" size={16} className="mr-2" />
                –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
              </Button>
            </div>
          </CardContent>
        </Card>
      )}
    </>
  );
};

export default SupportChatBot;
